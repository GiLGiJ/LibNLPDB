<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Staty</name>
    </assembly>
    <members>
        <member name="T:Staty.Configuration.GoToAction`2">
            <summary>
            An action that performs a given transition-action with the provided event and data as arguments
            </summary>
            <typeparam name="TStateEnum">The enumeration which contains a values for each available state</typeparam>
            <typeparam name="TEventData">The type of the event-data that can be passed to the state-machine</typeparam>
        </member>
        <member name="M:Staty.Configuration.GoToAction`2.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Staty.Configuration.GoToAction`2"/> class.
            </summary>
            <param name="destinationState">The target state, this transition should </param>
        </member>
        <member name="M:Staty.Configuration.GoToAction`2.PerformTransition``1(System.Action{`0,``0,`1},``0,`1)">
            <summary>
            Exercises the given action with the provided event and data with the destination state configured via the constructor
            </summary>
            <typeparam name="TEventEnum">Enumeration of all possible events (internal and external)</typeparam>
            <param name="transitionAction">The actual action to be performed</param>
            <param name="occurredEvent">The event that occurred</param>
            <param name="eventData">Arbitrary payload</param>
        </member>
        <member name="T:Staty.Configuration.IAction`3">
            <summary>
            Interface for the builder-pattern that allows an action to be specified next
            </summary>
        </member>
        <member name="M:Staty.Configuration.IAction`3.GoTo(`0)">
            <summary>
            Specifies that the state-machine should transition to the destination state when
            the combination of source-state and event matches.
            </summary>
            <param name="destinationState">The destination state of the transition</param>
            <returns>A potentially complete state-machine configuration builder</returns>
            <exception cref="T:Staty.Exceptions.DuplicationConfigurationException">Thrown, if a configuration duplicate was found</exception>
        </member>
        <member name="M:Staty.Configuration.IAction`3.ThrowInvalidTransitionException">
            <summary>
            Specifies that the given event in the previously specified source-state should throw an exception if
            the transition is attempted.
            </summary>
            <returns>A potentially complete state-machine configuration builder</returns>
            <exception cref="T:Staty.Exceptions.DuplicationConfigurationException">Thrown, if a configuration duplicate was found</exception>
        </member>
        <member name="M:Staty.Configuration.IAction`3.IgnoreEvent">
            <summary>
            Specifies that the combination of event and source-state should be ignored by the state-machine
            </summary>
            <returns>A potentially complete state-machine configuration builder</returns>
            <exception cref="T:Staty.Exceptions.DuplicationConfigurationException">Thrown, if a configuration duplicate was found</exception>
        </member>
        <member name="T:Staty.Configuration.IEventState`3">
            <summary>
            Interface that only allows to configure the event to receive in a fluent builder-pattern
            </summary>
        </member>
        <member name="M:Staty.Configuration.IEventState`3.AndReceived(`1)">
            <summary>
            Starts a new configuration-entry by specifying the event that must happen in a source-state to trigger an action
            </summary>
            <param name="eventEnum">The event that must occur</param>
            <returns>An object for the next step of the builder-pattern</returns>
        </member>
        <member name="T:Staty.Configuration.IgnoreEventAction`2">
            <summary>
            An action that does nothing upon execution
            </summary>
        </member>
        <member name="M:Staty.Configuration.IgnoreEventAction`2.PerformTransition``1(System.Action{`0,``0,`1},``0,`1)">
            <inheritdoc/>
        </member>
        <member name="T:Staty.Configuration.ISourceState`3">
            <summary>
            Interface that only allows to configure the source-state in a fluent builder-pattern
            </summary>
        </member>
        <member name="M:Staty.Configuration.ISourceState`3.HappensIn(`0)">
            <summary>
            Specifies in which state an event must happen to trigger an action, which is specified next.
            </summary>
            <param name="sourceState">The source state of a (transition-)action to configure</param>
            <returns>An object for the last step of the builder-pattern</returns>
        </member>
        <member name="T:Staty.Configuration.IStateMachineConfigurationBuilder`3">
            <summary>
            Interface of the basic state-machine configuration builder that allows
            to configure and build the configuration in a fluent syntax.
            </summary>
        </member>
        <member name="M:Staty.Configuration.IStateMachineConfigurationBuilder`3.Build">
            <summary>
            Call this method to complete the construction and return a new state-machine configuration with the 
            event-transition map that was configured with previous calls.
            </summary>
            <returns>A state-machine configuration</returns>
        </member>
        <member name="M:Staty.Configuration.IStateMachineConfigurationBuilder`3.When(`1)">
            <summary>
            Starts a new configuration-entry by specifying the event that must happen in a source-state to trigger an action
            </summary>
            <param name="eventEnum">The event that must occur</param>
            <returns>An object for the next step of the builder-pattern</returns>
        </member>
        <member name="M:Staty.Configuration.IStateMachineConfigurationBuilder`3.WhenIn(`0)">
            <summary>
            Starts a new configuration-entry by specifying the state, in which an event must happen to trigger an action.
            </summary>
            <param name="sourceState">The state in which an event has to happen</param>
            <returns>An object for the next step of the builder-pattern</returns>
        </member>
        <member name="T:Staty.Configuration.StateMachineConfigurationBuilder`3">
            <summary>
            Class that implements a builder-pattern for creating a configuration of the state-machine in a fluent syntax.
            The original idea comes from http://blog.crisp.se/2013/10/09/perlundholm/another-builder-pattern-for-java
            </summary>
            <typeparam name="TStateEnum">The enumeration which contains a values for each available state</typeparam>
            <typeparam name="TEventEnum">The enumeration which contains all possible events (internal and external) that this state-machine should be able to process.</typeparam>
            <typeparam name="TEventData">The type of the event-data that can be passed to the state-machine</typeparam>
        </member>
        <member name="M:Staty.Configuration.StateMachineConfigurationBuilder`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Staty.Configuration.StateMachineConfigurationBuilder`3"/> class
            that can be used to created a state-machine configuration with a fluent syntax.
            </summary>
        </member>
        <member name="M:Staty.Configuration.StateMachineConfigurationBuilder`3.Build">
            <inheritdoc/>
        </member>
        <member name="M:Staty.Configuration.StateMachineConfigurationBuilder`3.When(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Staty.Configuration.StateMachineConfigurationBuilder`3.WhenIn(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Staty.Configuration.StateMachineConfigurationBuilder`3.HappensIn(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Staty.Configuration.StateMachineConfigurationBuilder`3.AndReceived(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Staty.Configuration.StateMachineConfigurationBuilder`3.GoTo(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Staty.Configuration.StateMachineConfigurationBuilder`3.ThrowInvalidTransitionException">
            <inheritdoc/>
        </member>
        <member name="M:Staty.Configuration.StateMachineConfigurationBuilder`3.IgnoreEvent">
            <inheritdoc/>
        </member>
        <member name="M:Staty.Configuration.StateMachineConfigurationBuilder`3.EnsureEventTransitionMapHasEventEntry(`1)">
            <summary>
            Create the event-entry in the dictionary if it does not exist yet
            </summary>
            <param name="eventEnum">The event that should be checked for an existing entry in the transition map</param>
        </member>
        <member name="T:Staty.Configuration.ThrowInvalidTransitionExceptionAction`2">
            <summary>
            A transition action that will deliberately throw an exception, if the transition is executed
            </summary>
            <typeparam name="TStateEnum">The enumeration which contains a values for each available state</typeparam>
            <typeparam name="TEventData">The type of the event-data that can be passed to the state-machine</typeparam>
        </member>
        <member name="M:Staty.Configuration.ThrowInvalidTransitionExceptionAction`2.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Staty.Configuration.ThrowInvalidTransitionExceptionAction`2"/> class.
            </summary>
            <param name="stateName">How this name will be refered to in the state-machine</param>
        </member>
        <member name="P:Staty.Configuration.ThrowInvalidTransitionExceptionAction`2.StateName">
            <summary>
            Gets the name of the source-state that the state machine was in when the prohibited transition was triggered
            </summary>
        </member>
        <member name="M:Staty.Configuration.ThrowInvalidTransitionExceptionAction`2.PerformTransition``1(System.Action{`0,``0,`1},``0,`1)">
            <inheritdoc/>
        </member>
        <member name="T:Staty.Configuration.TransitionAction`2">
            <summary>
            Base-class for transition actions
            </summary>
        </member>
        <member name="M:Staty.Configuration.TransitionAction`2.PerformTransition``1(System.Action{`0,``0,`1},``0,`1)">
            <summary>
            Performs the actual transition by executing the provided action with the provided event and event-data
            </summary>
            <param name="transitionAction">The internal action to be performed</param>
            <param name="occurredEvent">The event that occurred</param>
            <param name="eventData">An optional payload</param>
        </member>
        <member name="T:Staty.Configuration.IStateMachineConfiguration`3">
            <summary>
            The configuration which specifies which event should trigger
            </summary>
            <typeparam name="TStateEnum">The type of the state-machine states enumeration</typeparam>
            <typeparam name="TEventEnum">The type of the state-machine events enumeration</typeparam>
            <typeparam name="TEventData">The type of the event-data that can be passed to the state-machine</typeparam>
        </member>
        <member name="M:Staty.Configuration.IStateMachineConfiguration`3.MapEvent(`0,`1)">
            <summary>
            Method that maps the given event onto a new state that should be transitioned to
            </summary>
            <param name="currentState">The current state that the state-machine can be in</param>
            <param name="occurredEvent">An event that might happen</param>
            <returns>The transition-action that should be performed depending on the given state and event</returns>
            <exception cref="T:Staty.Exceptions.TransitionNotFoundException">Thrown, if the provided combination of state and event was not mapped to a transition</exception>
        </member>
        <member name="T:Staty.Configuration.StateMachineConfiguration`3">
            <summary>
            The default-implementation for a state-machine configuration.
            Use <see cref="T:Staty.Configuration.StateMachineConfigurationBuilder`3"/> to create a configuration.
            </summary>
        </member>
        <member name="M:Staty.Configuration.StateMachineConfiguration`3.#ctor(System.Collections.Generic.IDictionary{`1,System.Collections.Generic.IDictionary{`0,Staty.Configuration.TransitionAction{`0,`2}}})">
            <summary>
            Initializes a new instance of the <see cref="T:Staty.Configuration.StateMachineConfiguration`3"/> class.
            </summary>
            <param name="eventTransitionMap">An event transition map</param>
        </member>
        <member name="M:Staty.Configuration.StateMachineConfiguration`3.MapEvent(`0,`1)">
            <inheritdoc/>
        </member>
        <member name="T:Staty.Exceptions.DuplicationConfigurationException">
            <summary>
            Exception that will be raised, if a configuration is tried to added twice
            </summary>
        </member>
        <member name="M:Staty.Exceptions.DuplicationConfigurationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Staty.Exceptions.DuplicationConfigurationException"/> class.
            </summary>
        </member>
        <member name="T:Staty.Exceptions.NotInitializedException">
            <summary>
            Exception that will be thrown, if the state provider was not correctly initialized
            </summary>
        </member>
        <member name="M:Staty.Exceptions.NotInitializedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Staty.Exceptions.NotInitializedException"/> class.
            </summary>
        </member>
        <member name="T:Staty.Exceptions.InvalidTransitionException">
            <summary>
            Exception that will be thrown, if an invalid transition was attempted
            </summary>
        </member>
        <member name="M:Staty.Exceptions.InvalidTransitionException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Staty.Exceptions.InvalidTransitionException"/> class.
            </summary>
            <param name="currentState">The current state of the state-machine</param>
            <param name="eventName">The event that occurred but was not allowed</param>
        </member>
        <member name="T:Staty.Exceptions.TransitionFailedException">
            <summary>
            Exception, that will be thrown, if the state machine failed to perform a transition (e.g. due to unhandled exception in a states enter method)
            </summary>
        </member>
        <member name="M:Staty.Exceptions.TransitionFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Staty.Exceptions.TransitionFailedException"/> class.
            </summary>
            <param name="message">An message to explain the exception</param>
            <param name="innerException">The inner exception that was originally caught</param>
        </member>
        <member name="T:Staty.Exceptions.TransitionNotFoundException">
            <summary>
            Exception, that will be thrown, if a requested transition was not found in the state-machine configuration
            </summary>
        </member>
        <member name="M:Staty.Exceptions.TransitionNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Staty.Exceptions.TransitionNotFoundException"/> class.
            </summary>
            <param name="eventName">Name of the event that was not found in the configuration</param>
        </member>
        <member name="M:Staty.Exceptions.TransitionNotFoundException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Staty.Exceptions.TransitionNotFoundException"/> class.
            </summary>
            <param name="eventName">Name of the event that was not found in the configuration</param>
            <param name="currentStateName">The name of the state that the state-machine was currently in</param>
        </member>
        <member name="T:Staty.Exceptions.StateNotFoundException">
            <summary>
            Exception that is thrown, if a state was not found in the state-provider
            </summary>
        </member>
        <member name="M:Staty.Exceptions.StateNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Staty.Exceptions.StateNotFoundException"/> class.
            </summary>
            <param name="stateName">The human-readable name of a state</param>
        </member>
        <member name="T:Staty.Exceptions.StateEnumMustBeUniqueException">
            <summary>
            Exception that is thrown, if a state-enumeration was used in two states
            </summary>
        </member>
        <member name="M:Staty.Exceptions.StateEnumMustBeUniqueException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Staty.Exceptions.StateEnumMustBeUniqueException"/> class.
            </summary>
        </member>
        <member name="T:Staty.Exceptions.FinalStateTransitionException">
            <summary>
            Exception that will be thrown, if the user requested a transition although the state-machine was already in the final state.
            </summary>
        </member>
        <member name="M:Staty.Exceptions.FinalStateTransitionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Staty.Exceptions.FinalStateTransitionException"/> class.
            </summary>
        </member>
        <member name="T:Staty.IState`3">
            <summary>
            Interface for a base state that the state-machine can be in
            </summary>
        </member>
        <member name="P:Staty.IState`3.Name">
            <summary>
            Gets the name of this state (will be resolved using reflection)
            </summary>
        </member>
        <member name="P:Staty.IState`3.StateEnum">
            <summary>
            Gets the enumeration-value that corresponds to this state
            </summary>
        </member>
        <member name="M:Staty.IState`3.Enter(`1,`2)">
            <summary>
            A method that will be invoked, when this state is being entered during a transition
            </summary>
            <param name="transitionEvent">The event that triggered this transition</param>
            <param name="eventData">A user-specific object that can contain arbitrary event-data</param>
        </member>
        <member name="M:Staty.IState`3.Exit(`1)">
            <summary>
            Method that automatically will be called, when this state is exited.
            Override this method to implement your own exit-logic.
            </summary>
            <param name="transitionEvent">The event that caused that this state is left</param>
        </member>
        <member name="T:Staty.IStateMachine`4">
            <summary>
            Base-interface for a state-machine
            </summary>
            <typeparam name="TState">The base-class from which all states must derive</typeparam>
            <typeparam name="TStateEnum">The enumeration which contains a values for each available state</typeparam>
            <typeparam name="TEventEnum">The enumeration which contains all possible events (internal and external) that this state-machine should be able to process.</typeparam>
            <typeparam name="TEventData">The type of the event-data that can be passed to the state-machine</typeparam>
        </member>
        <member name="P:Staty.IStateMachine`4.CurrentState">
            <summary>
            Gets the current state of the state-machine
            </summary>
        </member>
        <member name="P:Staty.IStateMachine`4.CurrentStateEnum">
            <summary>
            Gets the enumeration-value that represents the current state of the state-machine
            </summary>
        </member>
        <member name="P:Staty.IStateMachine`4.FinalState">
            <summary>
            Gets the enumeration-value that represents the final state of the state-machine
            </summary>
        </member>
        <member name="T:Staty.IStateProvider`4">
            <summary>
            Classes implementing this interface must implement a state-lookup method to resolve a state from a state-enumeration
            </summary>
        </member>
        <member name="M:Staty.IStateProvider`4.GetState(`1)">
            <summary>
            Method to retrieve a state by its enumeration value.
            Note that InitializeStates must be called, before this method can be used or a NotInitializedException will be thrown
            </summary>
            <param name="targetStateEnum">The enum-value that represents a requested state and should be resolved to an object</param>
            <returns>Resolved instance of a state-object that maps to the provided target state enum value</returns>
            <exception cref="T:Staty.Exceptions.StateNotFoundException">Thrown, if no such state was found</exception>
            <exception cref="T:Staty.Exceptions.NotInitializedException">Thrown, if the state-provider was not initialized correctly</exception>
        </member>
        <member name="M:Staty.IStateProvider`4.InitializeStates(Staty.IStateTransitioner{`2,`3})">
            <summary>
            Initialization-method that must be called in order to initialize the state-provider. 
            The state-machine can not be provided in the constructor, because of the circular dependency.
            </summary>
            <param name="stateTransitioner">The state machine</param>
        </member>
        <member name="T:Staty.IStateTransitioner`2">
            <summary>
            Classes that implement this interface must process internal and external events
            </summary>
        </member>
        <member name="M:Staty.IStateTransitioner`2.ExternalEvent(`0,`1)">
            <summary>
            Triggers the specified external event. This event locks the entire state-machine
            while the transition is ongoing. This ensures that multiple events can happen
            concurrently and are handled in a thread-safe way.
            </summary>
            <param name="externalEvent">The external event that should be fired</param>
            <param name="eventData">And optional event-data object</param>
            <exception cref="T:Staty.Exceptions.TransitionNotFoundException">Thrown, if the state-machine is misconfigured and a requested transition was not found (which happens if the provided combination of state and event was not mapped to a transition).</exception>
            <exception cref="T:Staty.Exceptions.TransitionFailedException">Thrown, if the actual transition failed</exception>
            <exception cref="T:Staty.Exceptions.FinalStateTransitionException">Thrown, if an event occurs, after the state-machine has hit its final state</exception>
        </member>
        <member name="M:Staty.IStateTransitioner`2.InternalEvent(`0,`1)">
            <summary>
            Triggers the specified internal event. This event does not lock the state-machine.
            The transition will be enqueued and processed after the current operation has completed.
            Which destination state should be transitioned to, is determined by the StateMachineConfiguration
            </summary>
            <param name="internalEvent">The internal event that should be fired</param>
            <param name="eventData">And optional event-data object</param>
        </member>
        <member name="T:Staty.State`3">
            <summary>
            Abstract base class for state of the state-machine.
            Note that states are uniquely identified by its name.
            </summary>
        </member>
        <member name="M:Staty.State`3.#ctor(`0,Staty.IStateTransitioner{`1,`2})">
            <summary>
            Initializes a new instance of the <see cref="T:Staty.State`3"/> class.
            </summary>
            <param name="stateEnum">The state-enum this state is associated with (should be statically typed)</param>
            <param name="stateTransitioner">The state-machine</param>
        </member>
        <member name="P:Staty.State`3.Name">
            <inheritdoc/>
        </member>
        <member name="P:Staty.State`3.StateEnum">
            <inheritdoc/>
        </member>
        <member name="P:Staty.State`3.StateTransitioner">
            <summary>
            Gets the reference to the state-machine (the event-processor) to enable internal events from inside of states
            </summary>
        </member>
        <member name="M:Staty.State`3.Enter(`1,`2)">
            <summary>
            Method that automatically will be called, when this state is entered.
            Override this method to implement your own enter-logic.
            </summary>
            <param name="transitionEvent">The event that caused this transition</param>
            <param name="eventData">The optional event-data that was provided</param>
        </member>
        <member name="M:Staty.State`3.Exit(`1)">
            <summary>
            Method that automatically will be called, when this state is exited.
            Override this method to implement your own exit-logic.
            </summary>
            <param name="transitionEvent">The event that caused that this state is left</param>
        </member>
        <member name="M:Staty.State`3.Dispose">
            <summary>
            Implementation of the disposable-pattern
            </summary>
        </member>
        <member name="M:Staty.State`3.Dispose(System.Boolean)">
            <summary>
            Override this method to actually implement a disposing in your state
            </summary>
            <param name="disposing">True, if the disposing should happen now</param>
        </member>
        <member name="M:Staty.State`3.Equals(Staty.State{`0,`1,`2})">
            <summary>
            Checks if the given state is equal to this state
            </summary>
            <param name="other">The other state</param>
            <returns>True if they are considered equal</returns>
        </member>
        <member name="M:Staty.State`3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Staty.State`3.op_Equality(Staty.State{`0,`1,`2},Staty.State{`0,`1,`2})">
            <summary>
            Checks if two states are considered equal
            </summary>
            <param name="left">The first state</param>
            <param name="right">The second state</param>
            <returns>True if they are considered equal</returns>
        </member>
        <member name="M:Staty.State`3.op_Inequality(Staty.State{`0,`1,`2},Staty.State{`0,`1,`2})">
            <summary>        
            /// Checks if two states are considered not equal
            </summary>
            <param name="left">The first state</param>
            <param name="right">The second state</param>
            <returns>False if they are considered equal</returns>
        </member>
        <member name="M:Staty.State`3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Staty.State`3.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Staty.StateMachine`4">
            <summary>
            The actual state-machine that implements the transition-logic between states and guarantees
            thread-safety of those transitions, even if multiple events occur at the same point in time.
            
            Your state-machine should inherit from this class with your own custom types and a 
            state-machine configuration that can be created with <see cref="T:Staty.Configuration.StateMachineConfigurationBuilder`3"/>.
            </summary>
            <typeparam name="TState">Type of the states that your state-machine states derive from</typeparam>
            <typeparam name="TStateEnum">The enumeration which contains a values for each available state</typeparam>
            <typeparam name="TEventEnum">The enumeration which contains all possible events (internal and external) that this state-machine should be able to process.</typeparam>
            <typeparam name="TEventData">The type that specifies the event-data that is passed along the state-transitions</typeparam>
        </member>
        <member name="M:Staty.StateMachine`4.#ctor(Staty.Configuration.IStateMachineConfiguration{`1,`2,`3},Staty.IStateProvider{`0,`1,`2,`3},`1,System.Nullable{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Staty.StateMachine`4"/> class.
            </summary>
            <param name="stateMachineConfiguration">The configuration for your state-machine</param>
            <param name="stateProvider">An implementation of a state-provider that can be queried for state-instances</param>
            <param name="initialState">The initial state of the state-machine. Will be entered with the event that is defined first in the enumeration upon start.</param>
            <param name="finalState">An optional final state that must not be left once entered</param>
        </member>
        <member name="P:Staty.StateMachine`4.CurrentState">
            <inheritdoc/>
        </member>
        <member name="P:Staty.StateMachine`4.CurrentStateEnum">
            <inheritdoc/>
        </member>
        <member name="P:Staty.StateMachine`4.FinalState">
            <summary>
            Gets an optional final state that can not be left with any transition and will cause subsequent 
            TriggerTransition calls to throw an exception
            </summary>
        </member>
        <member name="M:Staty.StateMachine`4.ExternalEvent(`2,`3)">
            <inheritdoc/>
        </member>
        <member name="M:Staty.StateMachine`4.InternalEvent(`2,`3)">
            <inheritdoc/>
        </member>
        <member name="M:Staty.StateMachine`4.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Staty.StateMachine`4.Dispose(System.Boolean)">
            <summary>
            Dispose-method that can be used to clean up unmanaged resources
            </summary>
            <param name="disposing">True if disposing should happen</param>
        </member>
        <member name="T:Staty.StateProvider`4">
            <summary>
            An abstract implementation for a state-provider.
            </summary>
        </member>
        <member name="M:Staty.StateProvider`4.GetState(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Staty.StateProvider`4.InitializeStates(Staty.IStateTransitioner{`2,`3})">
            <inheritdoc/>
        </member>
        <member name="M:Staty.StateProvider`4.GetStates(Staty.IStateTransitioner{`2,`3})">
            <summary>
            Implement this method in order to create all states that this state machine should support
            </summary>
            <param name="stateTransitioner">The underlying state-transition that processes events</param>
            <returns>List of all states in your state-machine</returns>
        </member>
        <member name="M:Staty.StateProvider`4.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Staty.StateProvider`4.Dispose(System.Boolean)">
            <summary>
            Disposes all states
            </summary>
            <param name="disposing">True if actually disposing manually</param>
        </member>
        <member name="T:Staty.Transition`3">
            <summary>
            Basic data transfer object for transitions
            </summary>
        </member>
        <member name="M:Staty.Transition`3.#ctor(`0,Staty.Configuration.TransitionAction{`1,`2},`2)">
            <summary>
            Initializes a new instance of the <see cref="T:Staty.Transition`3"/> class.
            </summary>
            <param name="occurredEvent">The event that occurred</param>
            <param name="transitionAction">The transition action that should be executed</param>
            <param name="eventData">An optional payload</param>
        </member>
        <member name="P:Staty.Transition`3.OccurredEvent">
            <summary>
            Gets the event that occurred
            </summary>
        </member>
        <member name="P:Staty.Transition`3.TransitionAction">
            <summary>
            Gets the transition action that should be executed
            </summary>
        </member>
        <member name="P:Staty.Transition`3.EventData">
            <summary>
            Gets an optional payload
            </summary>
        </member>
    </members>
</doc>
